
package com.nttdata.sf.tooling;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SforceServicePortType", targetNamespace = "urn:tooling.soap.sforce.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SforceServicePortType {


    /**
     * Create a set of new sObjects
     * 
     * @param sObjects
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.SaveResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "create", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.CreateResponse")
    public List<SaveResult> create(
        @WebParam(name = "sObjects", targetNamespace = "urn:tooling.soap.sforce.com")
        List<SObject> sObjects);

    /**
     * Delete a set of sObjects
     * 
     * @param ids
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.DeleteResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "delete", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DeleteResponse")
    public List<DeleteResult> delete(
        @WebParam(name = "ids", targetNamespace = "urn:tooling.soap.sforce.com")
        List<String> ids);

    /**
     * Describe the Global state
     * 
     * @return
     *     returns com.nttdata.sf.tooling.DescribeGlobalResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "describeGlobal", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeGlobal")
    @ResponseWrapper(localName = "describeGlobalResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeGlobalResponse")
    public DescribeGlobalResult describeGlobal();

    /**
     * Describe an sObject
     * 
     * @param type
     * @return
     *     returns com.nttdata.sf.tooling.DescribeSObjectResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "describeSObject", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeSObject")
    @ResponseWrapper(localName = "describeSObjectResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeSObjectResponse")
    public DescribeSObjectResult describeSObject(
        @WebParam(name = "type", targetNamespace = "urn:tooling.soap.sforce.com")
        String type);

    /**
     * Describe a number sObjects
     * 
     * @param types
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.DescribeSObjectResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "describeSObjects", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeSObjects")
    @ResponseWrapper(localName = "describeSObjectsResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeSObjectsResponse")
    public List<DescribeSObjectResult> describeSObjects(
        @WebParam(name = "types", targetNamespace = "urn:tooling.soap.sforce.com")
        List<String> types);

    /**
     * Determine which actions are available for the given workitem
     * 
     * @param workitemIds
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.DescribeWorkitemActionResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "describeWorkitemActions", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeWorkitemActions")
    @ResponseWrapper(localName = "describeWorkitemActionsResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.DescribeWorkitemActionsResponse")
    public List<DescribeWorkitemActionResult> describeWorkitemActions(
        @WebParam(name = "workitemIds", targetNamespace = "urn:tooling.soap.sforce.com")
        List<String> workitemIds);

    /**
     * Execute an anonymous Apex code block
     * 
     * @param string
     * @return
     *     returns com.nttdata.sf.tooling.ExecuteAnonymousResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "executeAnonymous", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.ExecuteAnonymous")
    @ResponseWrapper(localName = "executeAnonymousResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.ExecuteAnonymousResponse")
    public ExecuteAnonymousResult executeAnonymous(
        @WebParam(name = "String", targetNamespace = "urn:tooling.soap.sforce.com")
        String string);

    /**
     * Get the IDs for deleted sObjects
     * 
     * @param start
     * @param sObjectType
     * @param end
     * @return
     *     returns com.nttdata.sf.tooling.GetDeletedResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "getDeleted", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetDeleted")
    @ResponseWrapper(localName = "getDeletedResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetDeletedResponse")
    public GetDeletedResult getDeleted(
        @WebParam(name = "sObjectType", targetNamespace = "urn:tooling.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "start", targetNamespace = "urn:tooling.soap.sforce.com")
        XMLGregorianCalendar start,
        @WebParam(name = "end", targetNamespace = "urn:tooling.soap.sforce.com")
        XMLGregorianCalendar end);

    /**
     * Gets server timestamp
     * 
     * @return
     *     returns com.nttdata.sf.tooling.GetServerTimestampResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "getServerTimestamp", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetServerTimestamp")
    @ResponseWrapper(localName = "getServerTimestampResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetServerTimestampResponse")
    public GetServerTimestampResult getServerTimestamp();

    /**
     * Get the IDs for updated sObjects
     * 
     * @param start
     * @param sObjectType
     * @param end
     * @return
     *     returns com.nttdata.sf.tooling.GetUpdatedResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "getUpdated", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetUpdated")
    @ResponseWrapper(localName = "getUpdatedResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetUpdatedResponse")
    public GetUpdatedResult getUpdated(
        @WebParam(name = "sObjectType", targetNamespace = "urn:tooling.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "start", targetNamespace = "urn:tooling.soap.sforce.com")
        XMLGregorianCalendar start,
        @WebParam(name = "end", targetNamespace = "urn:tooling.soap.sforce.com")
        XMLGregorianCalendar end);

    /**
     * Returns standard information relevant to the current user
     * 
     * @return
     *     returns com.nttdata.sf.tooling.GetUserInfoResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "getUserInfo", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetUserInfo")
    @ResponseWrapper(localName = "getUserInfoResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.GetUserInfoResponse")
    public GetUserInfoResult getUserInfo();

    /**
     * Logs out and invalidates session ids
     * 
     * @param arrayList
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.InvalidateSessionsResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "invalidateSessions", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.InvalidateSessions")
    @ResponseWrapper(localName = "invalidateSessionsResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.InvalidateSessionsResponse")
    public List<InvalidateSessionsResult> invalidateSessions(
        @WebParam(name = "ArrayList", targetNamespace = "urn:tooling.soap.sforce.com")
        List<String> arrayList);

    /**
     * Login to the Salesforce.com SOAP Api
     * 
     * @param username
     * @param password
     * @return
     *     returns com.nttdata.sf.tooling.LoginResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "login", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.LoginResponse")
    public LoginResult login(
        @WebParam(name = "username", targetNamespace = "urn:tooling.soap.sforce.com")
        String username,
        @WebParam(name = "password", targetNamespace = "urn:tooling.soap.sforce.com")
        String password);

    /**
     * Logout the current user, invalidating the current session.
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "logout", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Logout")
    @ResponseWrapper(localName = "logoutResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.LogoutResponse")
    public void logout();

    /**
     * Create a Query Cursor
     * 
     * @param queryString
     * @return
     *     returns com.nttdata.sf.tooling.QueryResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "query", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Query")
    @ResponseWrapper(localName = "queryResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.QueryResponse")
    public QueryResult query(
        @WebParam(name = "queryString", targetNamespace = "urn:tooling.soap.sforce.com")
        String queryString);

    /**
     * Create a Query Cursor, including deleted sObjects
     * 
     * @param queryString
     * @return
     *     returns com.nttdata.sf.tooling.QueryResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "queryAll", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.QueryAll")
    @ResponseWrapper(localName = "queryAllResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.QueryAllResponse")
    public QueryResult queryAll(
        @WebParam(name = "queryString", targetNamespace = "urn:tooling.soap.sforce.com")
        String queryString);

    /**
     * Gets the next batch of sObjects from a query
     * 
     * @param queryLocator
     * @return
     *     returns com.nttdata.sf.tooling.QueryResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "queryMore", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.QueryMore")
    @ResponseWrapper(localName = "queryMoreResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.QueryMoreResponse")
    public QueryResult queryMore(
        @WebParam(name = "queryLocator", targetNamespace = "urn:tooling.soap.sforce.com")
        String queryLocator);

    /**
     * Get a set of sObjects
     * 
     * @param ids
     * @param select
     * @param type
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.SObject>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "retrieve", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Retrieve")
    @ResponseWrapper(localName = "retrieveResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.RetrieveResponse")
    public List<SObject> retrieve(
        @WebParam(name = "select", targetNamespace = "urn:tooling.soap.sforce.com")
        String select,
        @WebParam(name = "type", targetNamespace = "urn:tooling.soap.sforce.com")
        String type,
        @WebParam(name = "ids", targetNamespace = "urn:tooling.soap.sforce.com")
        List<String> ids);

    /**
     * Execute test methods
     * 
     * @param runTestsRequest
     * @return
     *     returns com.nttdata.sf.tooling.RunTestsResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "runTests", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.RunTests")
    @ResponseWrapper(localName = "runTestsResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.RunTestsResponse")
    public RunTestsResult runTests(
        @WebParam(name = "RunTestsRequest", targetNamespace = "urn:tooling.soap.sforce.com")
        RunTestsRequest runTestsRequest);

    /**
     * Execute asynchronous runTests
     * 
     * @param string
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "runTestsAsynchronous", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.RunTestsAsynchronous")
    @ResponseWrapper(localName = "runTestsAsynchronousResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.RunTestsAsynchronousResponse")
    public String runTestsAsynchronous(
        @WebParam(name = "String", targetNamespace = "urn:tooling.soap.sforce.com")
        String string);

    /**
     * Set a user's password
     * 
     * @param userId
     * @param password
     * @return
     *     returns com.nttdata.sf.tooling.SetPasswordResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "setPassword", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.SetPassword")
    @ResponseWrapper(localName = "setPasswordResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.SetPasswordResponse")
    public SetPasswordResult setPassword(
        @WebParam(name = "userId", targetNamespace = "urn:tooling.soap.sforce.com")
        String userId,
        @WebParam(name = "password", targetNamespace = "urn:tooling.soap.sforce.com")
        String password);

    /**
     * Update a set of sObjects
     * 
     * @param sObjects
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.SaveResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "update", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.UpdateResponse")
    public List<SaveResult> update(
        @WebParam(name = "sObjects", targetNamespace = "urn:tooling.soap.sforce.com")
        List<SObject> sObjects);

    /**
     * Update or insert a set of sObjects based on object id
     * 
     * @param fieldName
     * @param entities
     * @return
     *     returns java.util.List<com.nttdata.sf.tooling.UpsertResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:tooling.soap.sforce.com")
    @RequestWrapper(localName = "upsert", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.Upsert")
    @ResponseWrapper(localName = "upsertResponse", targetNamespace = "urn:tooling.soap.sforce.com", className = "com.nttdata.sf.tooling.UpsertResponse")
    public List<UpsertResult> upsert(
        @WebParam(name = "fieldName", targetNamespace = "urn:tooling.soap.sforce.com")
        String fieldName,
        @WebParam(name = "entities", targetNamespace = "urn:tooling.soap.sforce.com")
        List<SObject> entities);

}
